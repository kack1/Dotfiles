#+title:XMonad Config
#+PROPERTY: header-args :tangle xmonad.hs
#+auto_tangle t
#+author: Kyle Ackerman

* XMonad Config
This is my XMonad Config. So far it isn't much...but we are getting there!
This config is currently closely following XMonad's config tutorial.
* Imports
All of these imports are '/unqualified/', meaning we are importing all of the functions in their respective modules. EwmhDesktop allows XMonad to be EWMH complient (allows fullscreen).
#+begin_src haskell
import XMonad

import XMonad.Util.EZConfig
import XMonad.Util.Ungrab
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Magnifier
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
import XMonad.Util.Loggers
import XMonad.Util.Run
import qualified Data.Map         as M
import qualified XMonad.StackSet  as W
#+end_src
* Default Vars
Setting variables to make life easier
#+begin_src haskell
myTerminal :: String
myTerminal      = "alacritty"

myEmacs :: String
myEmacs = "emacsclient -c"

myKeepPass :: String
myKeepPass = "QT_SCALE_FACTOR=2 keepassxc"

myBoarderWidth = 2
myNormalBorderColor  = "#dddddd"
myFocusedBorderColor = "#007acc"
#+end_src
** pretty print
#+begin_src haskell
myXmobarPP :: PP
myXmobarPP = def
    { ppSep             = magenta " â€¢ "
    , ppTitleSanitize   = xmobarStrip
    , ppCurrent         = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2
    , ppHidden          = white . wrap " " ""
    , ppHiddenNoWindows = lowWhite . wrap " " ""
    , ppUrgent          = red . wrap (yellow "!") (yellow "!")
    , ppOrder           = myOrder
    , ppExtras          = [logTitles formatFocused formatUnfocused]
    }
  where
    myOrder [ws, l, _, wins] = [ws, l, wins]
    formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
    formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow

    -- | Windows should have *some* title, which should not not exceed a
    -- sane length.
    ppWindow :: String -> String
    ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30

    blue, lowWhite, magenta, red, white, yellow :: String -> String
    magenta  = xmobarColor "#ff79c6" ""
    blue     = xmobarColor "#bd93f9" ""
    white    = xmobarColor "#f8f8f2" ""
    yellow   = xmobarColor "#f1fa8c" ""
    red      = xmobarColor "#ff5555" ""
    lowWhite = xmobarColor "#bbbbbb" ""

#+end_src
* Basic Configuration
This is the bear minimum of a config. In addition, we are defining the modMask to being right-alt.
#+begin_src haskell
main :: IO ()
main = do
        xmproc <- spawnPipe  "~/.fehbg"
        xmonad . ewmhFullscreen . ewmh . xmobarProp . withEasySB (statusBarProp "xmobar" (pure myXmobarPP)) defToggleStrutsKey $ myConfig

myConfig = def
       {modMask = mod1Mask -- Rebind to the righgt-alt
        , layoutHook = myLayout -- Use custom Layouts
        , terminal = myTerminal
        , borderWidth = myBoarderWidth
        , normalBorderColor  = myNormalBorderColor
        , focusedBorderColor = myFocusedBorderColor
        , startupHook = myStartupHook
       }
        `additionalKeysP`
        [ ("M-f", spawn "firefox")
          ,("M-e", spawn (myEmacs))
          , ("M-t", withFocused toggleFloat)
          , ("M-l", spawn (myKeepPass))
        ]

        where
                toggleFloat w = windows (\s -> if M.member w (W.floating s)
                        then W.sink w s
                        else (W.float w (W.RationalRect (1/3) (1/4) (1/2) (4/5)) s))

#+end_src


* Layouts
Layouts Hook. tiled, Mirror tiled, and Full are the defaults. We have added the threeCol layout. In addition to that we have included magnifiercz' which magnifies a stack window by a given amount.
#+begin_src haskell
myLayout = tiled ||| Mirror tiled||| Full ||| threeCol
           where
             threeCol = magnifiercz' 1.3 $ ThreeColMid nmaster delta ratio
             tiled = Tall nmaster delta ratio
             nmaster = 1 --default number of windows in the master pane
             ratio = 1/2 --Default proportion of the screen occupied by master pane
             delta = 3/100 --Percent of screen to increment by when resizing panes
#+end_src
* Startup Hook
My startup hook
#+begin_src haskell
myStartupHook = do
    spawn "/usr/bin/emacs --daemon" --Emacs daemon for the emacsclient
#+end_src
